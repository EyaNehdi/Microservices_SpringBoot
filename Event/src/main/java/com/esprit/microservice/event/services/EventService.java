package com.esprit.microservice.event.services;

import com.esprit.microservice.event.entities.Event;
import com.esprit.microservice.event.repositories.IEventRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@AllArgsConstructor
@Service
public class EventService implements IEventService {

    private final IEventRepository eventRepository;

    // Ajouter un √©v√©nt
    public Event addEvent(Event event) {
        return eventRepository.save(event);
    }

    // Mettre √† jour un √©v√©nement
    public Event updateEvent(Event event) {
        return eventRepository.save(event);
    }



    // Supprimer un √©v√©nement
    public void deleteEvent(String id) {
        eventRepository.deleteById(id);
    }

    // R√©cup√©rer un √©v√©nement par ID
    public Event retrieveEvent(String id) {
        return eventRepository.findById(id).orElse(null);
    }

    // R√©cup√©rer tous les √©v√©nements
    public List<Event> retrieveAllEvents() {
        return (List<Event>)eventRepository.findAll();
    }

    // M√©thode de notification 3 jours avant
    public void sendReminderNotifications() {
        // Calcul
        LocalDate targetDate = LocalDate.now().plusDays(3);
        System.out.println("üîî Recherche des √©v√©nements pour la date cible : " + targetDate); //

        // R√©cup√©ration des √©v√©nements pour la date cible
        List<Event> events = eventRepository.findByDate(targetDate);

        // V√©rifie le nombre d'√©v√©nements r√©cup√©r√©s
        System.out.println("üîî Nombre d'√©v√©nements trouv√©s pour la date " + targetDate + " : " + events.size());

        // Si des √©v√©nements sont r√©cup√©r√©s, affiche leurs informations
        for (Event event : events) {
            System.out.println("üîî [Rappel] L'√©v√©nement \"" + event.getNomEvent()
                    + "\" aura lieu le " + event.getDate()
                    + " √† " + event.getLieu());
        }


    }
//recherche 
    @Override
    public List<Event> searchEventsByNameAndLocation(String nomEvent, String lieu) {
        return eventRepository.findByNomEventIgnoreCaseAndLieuIgnoreCase(nomEvent, lieu);
    }


}
